{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":3362,"databundleVersionId":31148,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rashidulhaqyousafzai/cat-vs-dogs-project?scriptVersionId=194170964\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\n\nimport os, shutil, pathlib\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nAUTOTUNE = tf.data.AUTOTUNE","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-26T17:22:46.791767Z","iopub.execute_input":"2024-08-26T17:22:46.791997Z","iopub.status.idle":"2024-08-26T17:22:46.79833Z","shell.execute_reply.started":"2024-08-26T17:22:46.791972Z","shell.execute_reply":"2024-08-26T17:22:46.797755Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"/kaggle/input/dogs-vs-cats/test1.zip\n/kaggle/input/dogs-vs-cats/train.zip\n/kaggle/input/dogs-vs-cats/sampleSubmission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"!unzip -qq /kaggle/input/dogs-vs-cats/train.zip","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:22:47.476476Z","iopub.execute_input":"2024-08-26T17:22:47.476889Z","iopub.status.idle":"2024-08-26T17:23:02.394438Z","shell.execute_reply.started":"2024-08-26T17:22:47.476855Z","shell.execute_reply":"2024-08-26T17:23:02.393261Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"replace train/cat.0.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\noriginal_dir = pathlib.Path(\"/kaggle/working/train\")\nnew_base_dir = pathlib.Path(\"/kaggle/working/cats_vs_dogs_small\")\n\ndef make_subset(subset_name, start_index, end_index):\n    for category in (\"cat\", \"dog\"):\n        dir = new_base_dir / subset_name / category\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n        fnames = [f\"{category}.{i}.jpg\" for i in range(start_index, end_index)]\n        for fname in fnames:\n            shutil.copyfile(src=original_dir / fname,\n                            dst=dir / fname)\n\nmake_subset(\"train\", start_index=0, end_index=1000)\nmake_subset(\"validation\", start_index=1000, end_index=1500)\nmake_subset(\"test\", start_index=1500, end_index=2500)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:23:02.39621Z","iopub.execute_input":"2024-08-26T17:23:02.396513Z","iopub.status.idle":"2024-08-26T17:23:02.603551Z","shell.execute_reply.started":"2024-08-26T17:23:02.396482Z","shell.execute_reply":"2024-08-26T17:23:02.602091Z"},"trusted":true},"execution_count":44,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[44], line 14\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m fname \u001b[38;5;129;01min\u001b[39;00m fnames:\n\u001b[1;32m     11\u001b[0m             shutil\u001b[38;5;241m.\u001b[39mcopyfile(src\u001b[38;5;241m=\u001b[39moriginal_dir \u001b[38;5;241m/\u001b[39m fname,\n\u001b[1;32m     12\u001b[0m                             dst\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mdir\u001b[39m \u001b[38;5;241m/\u001b[39m fname)\n\u001b[0;32m---> 14\u001b[0m \u001b[43mmake_subset\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtrain\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstart_index\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_index\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1000\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     15\u001b[0m make_subset(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalidation\u001b[39m\u001b[38;5;124m\"\u001b[39m, start_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1000\u001b[39m, end_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1500\u001b[39m)\n\u001b[1;32m     16\u001b[0m make_subset(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest\u001b[39m\u001b[38;5;124m\"\u001b[39m, start_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1500\u001b[39m, end_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2500\u001b[39m)\n","Cell \u001b[0;32mIn[44], line 11\u001b[0m, in \u001b[0;36mmake_subset\u001b[0;34m(subset_name, start_index, end_index)\u001b[0m\n\u001b[1;32m      9\u001b[0m fnames \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcategory\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mi\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.jpg\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(start_index, end_index)]\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m fname \u001b[38;5;129;01min\u001b[39;00m fnames:\n\u001b[0;32m---> 11\u001b[0m     \u001b[43mshutil\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcopyfile\u001b[49m\u001b[43m(\u001b[49m\u001b[43msrc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moriginal_dir\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m/\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mfname\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     12\u001b[0m \u001b[43m                    \u001b[49m\u001b[43mdst\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mdir\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m/\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mfname\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/shutil.py:258\u001b[0m, in \u001b[0;36mcopyfile\u001b[0;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    256\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(dst, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwb\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m fdst:\n\u001b[1;32m    257\u001b[0m         \u001b[38;5;66;03m# macOS\u001b[39;00m\n\u001b[0;32m--> 258\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m _HAS_FCOPYFILE:\n\u001b[1;32m    259\u001b[0m             \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    260\u001b[0m                 _fastcopy_fcopyfile(fsrc, fdst, posix\u001b[38;5;241m.\u001b[39m_COPYFILE_DATA)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"from tensorflow.keras.utils import image_dataset_from_directory\n\ntrain_dataset = image_dataset_from_directory(\n    new_base_dir / \"train\",\n    image_size=(180, 180),\n    batch_size=32)\nvalidation_dataset = image_dataset_from_directory(\n    new_base_dir / \"validation\",\n    image_size=(180, 180),\n    batch_size=32)\ntest_dataset = image_dataset_from_directory(\n    new_base_dir / \"test\",\n    image_size=(180, 180),\n    batch_size=32)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:23:02.604197Z","iopub.status.idle":"2024-08-26T17:23:02.604508Z","shell.execute_reply.started":"2024-08-26T17:23:02.604345Z","shell.execute_reply":"2024-08-26T17:23:02.60436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_path = '/kaggle/working/cats_vs_dogs_small/train/*/*.jpg'\ntest_path = '/kaggle/working/cats_vs_dogs_small/test/*/*.jpg'\nvalidation_path = '/kaggle/working/cats_vs_dogs_small/validation/*/*.jpg'","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:24:15.765817Z","iopub.execute_input":"2024-08-26T17:24:15.7668Z","iopub.status.idle":"2024-08-26T17:24:15.770433Z","shell.execute_reply.started":"2024-08-26T17:24:15.766765Z","shell.execute_reply":"2024-08-26T17:24:15.769689Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"TARGET_SIZE = [180, 180]","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:24:16.234137Z","iopub.execute_input":"2024-08-26T17:24:16.234554Z","iopub.status.idle":"2024-08-26T17:24:16.238498Z","shell.execute_reply.started":"2024-08-26T17:24:16.234518Z","shell.execute_reply":"2024-08-26T17:24:16.237738Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"CLASSES = [b'cat', b'dog']","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:24:17.093167Z","iopub.execute_input":"2024-08-26T17:24:17.093915Z","iopub.status.idle":"2024-08-26T17:24:17.097997Z","shell.execute_reply.started":"2024-08-26T17:24:17.093871Z","shell.execute_reply":"2024-08-26T17:24:17.097128Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"import math\ndef decode_jpeg_and_label(filename):\n    bits = tf.io.read_file(filename)\n    image = tf.io.decode_jpeg(bits)\n    image = tf.image.resize(image, [180, 180])\n    image = tf.cast(image, tf.uint8)\n    image = tf.image.encode_jpeg(image, optimize_size=True, chroma_downsampling=False)\n    label = tf.strings.split(tf.expand_dims(filename, axis=-1), sep='/')\n    label = label.values[-2]\n    return image, label\n\n\n\ndef create_dataset(pattern):\n    nb_images = len(tf.io.gfile.glob(pattern))\n    shard_size = math.ceil(1.0 * nb_images / 1)\n    filenames = tf.data.Dataset.list_files(pattern, seed=35155) # This also shuffles the images\n    dataset = filenames.map(decode_jpeg_and_label, num_parallel_calls=AUTOTUNE).batch(shard_size)\n    print(\"Pattern matches {} images which will be rewritten as {} .tfrec files containing {} images each.\".format(nb_images, 1, shard_size))\n    return dataset\n    \n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:33:15.535256Z","iopub.execute_input":"2024-08-26T17:33:15.535779Z","iopub.status.idle":"2024-08-26T17:33:15.542824Z","shell.execute_reply.started":"2024-08-26T17:33:15.535725Z","shell.execute_reply":"2024-08-26T17:33:15.541998Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"code","source":"train_dataset = create_dataset(train_path)\ntest_dataset = create_dataset(test_path)\nvalidation_dataset = create_dataset(validation_path)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:33:16.403885Z","iopub.execute_input":"2024-08-26T17:33:16.404294Z","iopub.status.idle":"2024-08-26T17:33:16.690921Z","shell.execute_reply.started":"2024-08-26T17:33:16.404259Z","shell.execute_reply":"2024-08-26T17:33:16.69013Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"Pattern matches 2000 images which will be rewritten as 1 .tfrec files containing 2000 images each.\nPattern matches 2000 images which will be rewritten as 1 .tfrec files containing 2000 images each.\nPattern matches 1000 images which will be rewritten as 1 .tfrec files containing 1000 images each.\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n#@title \"display utilities [RUN ME]\"\ndef display_9_images_from_dataset(dataset):\n  plt.figure(figsize=(13,13))\n  subplot=331\n  for i, (image, label) in enumerate(dataset):\n    plt.subplot(subplot)\n    plt.axis('off')\n    plt.imshow(image.numpy().astype(np.uint8))\n    plt.title(label, fontsize=16)\n    subplot += 1\n    if i==8:\n      break\n  #plt.tight_layout()\n  plt.subplots_adjust(wspace=0.1, hspace=0.1)\n  plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:33:17.632142Z","iopub.execute_input":"2024-08-26T17:33:17.632532Z","iopub.status.idle":"2024-08-26T17:33:17.638774Z","shell.execute_reply.started":"2024-08-26T17:33:17.632499Z","shell.execute_reply":"2024-08-26T17:33:17.637923Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"code","source":"# def preprocess_image(image):\n#     image = tf.image.resize(image, [180, 180])\n#     image = tf.cast(image, tf.float32)\n#     return image","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:38.964658Z","iopub.execute_input":"2024-08-26T17:27:38.965553Z","iopub.status.idle":"2024-08-26T17:27:38.96864Z","shell.execute_reply.started":"2024-08-26T17:27:38.965517Z","shell.execute_reply":"2024-08-26T17:27:38.967921Z"},"trusted":true},"execution_count":68,"outputs":[]},{"cell_type":"code","source":"train_dataset","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:39.11327Z","iopub.execute_input":"2024-08-26T17:27:39.114162Z","iopub.status.idle":"2024-08-26T17:27:39.118989Z","shell.execute_reply.started":"2024-08-26T17:27:39.114125Z","shell.execute_reply":"2024-08-26T17:27:39.118288Z"},"trusted":true},"execution_count":69,"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"<_ParallelMapDataset element_spec=(TensorSpec(shape=(180, 180, None), dtype=tf.uint8, name=None), TensorSpec(shape=(), dtype=tf.string, name=None))>"},"metadata":{}}]},{"cell_type":"code","source":"# # Assuming dataset1 is your original dataset consisting of pairs (x, y)\n# train_dataset = train_dataset.map(lambda x, y: (preprocess_image(x), y), num_parallel_calls=AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:40.003678Z","iopub.execute_input":"2024-08-26T17:27:40.004702Z","iopub.status.idle":"2024-08-26T17:27:40.007984Z","shell.execute_reply.started":"2024-08-26T17:27:40.004656Z","shell.execute_reply":"2024-08-26T17:27:40.007143Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"# display_9_images_from_dataset(dataset2)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:40.384181Z","iopub.execute_input":"2024-08-26T17:27:40.384604Z","iopub.status.idle":"2024-08-26T17:27:40.388264Z","shell.execute_reply.started":"2024-08-26T17:27:40.384562Z","shell.execute_reply":"2024-08-26T17:27:40.387593Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"# def recompress_image(image, label):\n#   image = tf.cast(image, tf.uint8)\n#   image = tf.image.encode_jpeg(image, optimize_size=True, chroma_downsampling=False)\n#   return image, label\n\n# train_dataset = train_dataset.map(recompress_image, num_parallel_calls=AUTOTUNE).batch(shard_size)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:41.294339Z","iopub.execute_input":"2024-08-26T17:27:41.294786Z","iopub.status.idle":"2024-08-26T17:27:41.298618Z","shell.execute_reply.started":"2024-08-26T17:27:41.294752Z","shell.execute_reply":"2024-08-26T17:27:41.297712Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"train_dataset","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:41.742794Z","iopub.execute_input":"2024-08-26T17:27:41.743527Z","iopub.status.idle":"2024-08-26T17:27:41.748391Z","shell.execute_reply.started":"2024-08-26T17:27:41.743486Z","shell.execute_reply":"2024-08-26T17:27:41.747695Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"<_ParallelMapDataset element_spec=(TensorSpec(shape=(180, 180, None), dtype=tf.uint8, name=None), TensorSpec(shape=(), dtype=tf.string, name=None))>"},"metadata":{}}]},{"cell_type":"code","source":"# for image, label in train_dataset.take(1):\n#     decoded_image = tf.image.decode_jpeg(image[0])\n#     print(decoded_image.shape)\n#     # Display the image\n#     plt.imshow(decoded_image)\n#     plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:44.073206Z","iopub.execute_input":"2024-08-26T17:27:44.074148Z","iopub.status.idle":"2024-08-26T17:27:44.077603Z","shell.execute_reply.started":"2024-08-26T17:27:44.074109Z","shell.execute_reply":"2024-08-26T17:27:44.076782Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"# for image, label in train_dataset.take(1):\n#     print(image.shape,label.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:27:44.373059Z","iopub.execute_input":"2024-08-26T17:27:44.373937Z","iopub.status.idle":"2024-08-26T17:27:44.377319Z","shell.execute_reply.started":"2024-08-26T17:27:44.373896Z","shell.execute_reply":"2024-08-26T17:27:44.376592Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"\n\ndef _bytestring_feature(list_of_bytestrings):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=list_of_bytestrings))\n\ndef _int_feature(list_of_ints): # int64\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=list_of_ints))\n\ndef _float_feature(list_of_floats): # float32\n  return tf.train.Feature(float_list=tf.train.FloatList(value=list_of_floats))\n  \n\ndef to_tfrecord(tfrec_filewriter, img_bytes, label):  \n  class_num = np.argmax(np.array(CLASSES)==label) # 'roses' => 2 (order defined in CLASSES)\n  one_hot_class = np.eye(len(CLASSES))[class_num]     # [0, 0, 1, 0, 0] for class #2, roses\n\n  feature = {\n      \"image\": _bytestring_feature([img_bytes]), # one image in the list\n      \"label\": _int_feature([class_num]),        # one class in the list\n  }\n  return tf.train.Example(features=tf.train.Features(feature=feature))\n  \n\nGCS_OUTPUT='/kaggle/working/'\n\ndef create_tfRecords(dataset,name):\n    print(f\"Writing TFRecords {name}\")\n    for shard, (image, label) in enumerate(dataset):\n      # batch size used as shard size here\n      shard_size = image.numpy().shape[0]\n      # good practice to have the number of records in the filename\n      filename = GCS_OUTPUT + f\"{name}.tfrec\"\n\n      with tf.io.TFRecordWriter(filename) as out_file:\n        for i in range(shard_size):\n          example = to_tfrecord(out_file,\n                                image.numpy()[i], # re-compressed image: already a byte string\n                                label.numpy()[i])\n          out_file.write(example.SerializeToString())\n        print(\"Wrote file {} containing {} records\".format(name, shard_size))","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:33:31.777816Z","iopub.execute_input":"2024-08-26T17:33:31.778214Z","iopub.status.idle":"2024-08-26T17:33:31.786635Z","shell.execute_reply.started":"2024-08-26T17:33:31.778183Z","shell.execute_reply":"2024-08-26T17:33:31.785812Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"train_tfRecords = create_tfRecords(train_dataset,'train')\ntest_tfRecords = create_tfRecords(test_dataset,'test')\nvalidation_tfRecords = create_tfRecords(validation_dataset,'validation')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:33:50.852305Z","iopub.execute_input":"2024-08-26T17:33:50.85271Z","iopub.status.idle":"2024-08-26T17:35:13.487748Z","shell.execute_reply.started":"2024-08-26T17:33:50.852678Z","shell.execute_reply":"2024-08-26T17:35:13.486733Z"},"trusted":true},"execution_count":84,"outputs":[{"name":"stdout","text":"Writing TFRecords test\nWrote file test containing 2000 records\nWriting TFRecords validation\nWrote file validation containing 1000 records\n","output_type":"stream"}]},{"cell_type":"code","source":"def read_tfrecord(example):\n    features = {\n        \"image\": tf.io.FixedLenFeature([], tf.string),  # tf.string = bytestring (not text string)\n        \"label\": tf.io.FixedLenFeature([], tf.int64),   # shape [] means scalar\n    }\n    # decode the TFRecord\n    example = tf.io.parse_single_example(example, features)\n    \n    \n    image = tf.io.decode_jpeg(example['image'], channels=3)\n    image = tf.reshape(image, [*TARGET_SIZE, 3])\n    \n    class_num = example['label']\n    \n    return image, class_num\n    \n# read from TFRecords. For optimal performance, read from multiple\n# TFRecord files at once and set the option experimental_deterministic = False\n# to allow order-altering optimizations.\n\noption_no_order = tf.data.Options()\noption_no_order.experimental_deterministic = False\n\ndef tfRecord_dataset(path):\n#     filenames = tf.io.gfile.glob(GCS_OUTPUT + \"*.tfrec\")\n    dataset = tf.data.TFRecordDataset(path, num_parallel_reads=AUTOTUNE)\n    dataset = dataset.with_options(option_no_order)\n    dataset = dataset.map(read_tfrecord, num_parallel_calls=AUTOTUNE)\n    dataset = dataset.shuffle(300).batch(64)\n    return dataset","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:18.263728Z","iopub.execute_input":"2024-08-26T17:42:18.264136Z","iopub.status.idle":"2024-08-26T17:42:18.271347Z","shell.execute_reply.started":"2024-08-26T17:42:18.264105Z","shell.execute_reply":"2024-08-26T17:42:18.270567Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"code","source":"val_dataset = tfRecord_dataset('/kaggle/working/validation.tfrec')\ntest_dataset = tfRecord_dataset('/kaggle/working/test.tfrec')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:19.254387Z","iopub.execute_input":"2024-08-26T17:42:19.254848Z","iopub.status.idle":"2024-08-26T17:42:19.310068Z","shell.execute_reply.started":"2024-08-26T17:42:19.254812Z","shell.execute_reply":"2024-08-26T17:42:19.309206Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"code","source":"for image,label in val_dataset.take(1):\n    print(image.shape,label)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:21.432442Z","iopub.execute_input":"2024-08-26T17:42:21.432855Z","iopub.status.idle":"2024-08-26T17:42:21.525135Z","shell.execute_reply.started":"2024-08-26T17:42:21.432822Z","shell.execute_reply":"2024-08-26T17:42:21.524145Z"},"trusted":true},"execution_count":101,"outputs":[{"name":"stdout","text":"(64, 180, 180, 3) tf.Tensor(\n[1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 1 1 1 1 1 0 0 1\n 1 0 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 0 1 0 0 1 1 1], shape=(64,), dtype=int64)\n","output_type":"stream"}]},{"cell_type":"code","source":"display_9_images_from_dataset(val_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:23.773461Z","iopub.execute_input":"2024-08-26T17:42:23.774249Z","iopub.status.idle":"2024-08-26T17:42:24.667307Z","shell.execute_reply.started":"2024-08-26T17:42:23.774211Z","shell.execute_reply":"2024-08-26T17:42:24.666061Z"},"trusted":true},"execution_count":102,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[102], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdisplay_9_images_from_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43mval_dataset\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[81], line 9\u001b[0m, in \u001b[0;36mdisplay_9_images_from_dataset\u001b[0;34m(dataset)\u001b[0m\n\u001b[1;32m      7\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(subplot)\n\u001b[1;32m      8\u001b[0m plt\u001b[38;5;241m.\u001b[39maxis(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124moff\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 9\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimshow\u001b[49m\u001b[43m(\u001b[49m\u001b[43mimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnumpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43muint8\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(label, fontsize\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m16\u001b[39m)\n\u001b[1;32m     11\u001b[0m subplot \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/matplotlib/pyplot.py:3562\u001b[0m, in \u001b[0;36mimshow\u001b[0;34m(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, data, **kwargs)\u001b[0m\n\u001b[1;32m   3541\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mimshow)\n\u001b[1;32m   3542\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mimshow\u001b[39m(\n\u001b[1;32m   3543\u001b[0m     X: ArrayLike \u001b[38;5;241m|\u001b[39m PIL\u001b[38;5;241m.\u001b[39mImage\u001b[38;5;241m.\u001b[39mImage,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3560\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   3561\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m AxesImage:\n\u001b[0;32m-> 3562\u001b[0m     __ret \u001b[38;5;241m=\u001b[39m \u001b[43mgca\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimshow\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   3563\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3564\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcmap\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcmap\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3565\u001b[0m \u001b[43m        \u001b[49m\u001b[43mnorm\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnorm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3566\u001b[0m \u001b[43m        \u001b[49m\u001b[43maspect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maspect\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3567\u001b[0m \u001b[43m        \u001b[49m\u001b[43minterpolation\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minterpolation\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3568\u001b[0m \u001b[43m        \u001b[49m\u001b[43malpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43malpha\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3569\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvmin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3570\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvmax\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmax\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3571\u001b[0m \u001b[43m        \u001b[49m\u001b[43morigin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morigin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3572\u001b[0m \u001b[43m        \u001b[49m\u001b[43mextent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mextent\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3573\u001b[0m \u001b[43m        \u001b[49m\u001b[43minterpolation_stage\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minterpolation_stage\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3574\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilternorm\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfilternorm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3575\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfilterrad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfilterrad\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3576\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresample\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresample\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3577\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3578\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m}\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3579\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3580\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3581\u001b[0m     sci(__ret)\n\u001b[1;32m   3582\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m __ret\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/matplotlib/__init__.py:1473\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m   1471\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1472\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1473\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1474\u001b[0m \u001b[43m            \u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1475\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mmap\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1476\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m{\u001b[49m\u001b[43mk\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1478\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1479\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[1;32m   1480\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/matplotlib/axes/_axes.py:5895\u001b[0m, in \u001b[0;36mAxes.imshow\u001b[0;34m(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, **kwargs)\u001b[0m\n\u001b[1;32m   5892\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m aspect \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5893\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mset_aspect(aspect)\n\u001b[0;32m-> 5895\u001b[0m \u001b[43mim\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5896\u001b[0m im\u001b[38;5;241m.\u001b[39mset_alpha(alpha)\n\u001b[1;32m   5897\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m im\u001b[38;5;241m.\u001b[39mget_clip_path() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5898\u001b[0m     \u001b[38;5;66;03m# image does not already have clipping set, clip to Axes patch\u001b[39;00m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/matplotlib/image.py:729\u001b[0m, in \u001b[0;36m_ImageBase.set_data\u001b[0;34m(self, A)\u001b[0m\n\u001b[1;32m    727\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(A, PIL\u001b[38;5;241m.\u001b[39mImage\u001b[38;5;241m.\u001b[39mImage):\n\u001b[1;32m    728\u001b[0m     A \u001b[38;5;241m=\u001b[39m pil_to_array(A)  \u001b[38;5;66;03m# Needed e.g. to apply png palette.\u001b[39;00m\n\u001b[0;32m--> 729\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_A \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_normalize_image_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mA\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    730\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_imcache \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    731\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstale \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/matplotlib/image.py:697\u001b[0m, in \u001b[0;36m_ImageBase._normalize_image_array\u001b[0;34m(A)\u001b[0m\n\u001b[1;32m    695\u001b[0m     A \u001b[38;5;241m=\u001b[39m A\u001b[38;5;241m.\u001b[39msqueeze(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m)  \u001b[38;5;66;03m# If just (M, N, 1), assume scalar and apply colormap.\u001b[39;00m\n\u001b[1;32m    696\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (A\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m A\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m3\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m A\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m] \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m]):\n\u001b[0;32m--> 697\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mA\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m for image data\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    698\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m A\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m3\u001b[39m:\n\u001b[1;32m    699\u001b[0m     \u001b[38;5;66;03m# If the input data has values outside the valid range (after\u001b[39;00m\n\u001b[1;32m    700\u001b[0m     \u001b[38;5;66;03m# normalisation), we issue a warning and then clip X to the bounds\u001b[39;00m\n\u001b[1;32m    701\u001b[0m     \u001b[38;5;66;03m# - otherwise casting wraps extreme values, hiding outliers and\u001b[39;00m\n\u001b[1;32m    702\u001b[0m     \u001b[38;5;66;03m# making reliable interpretation impossible.\u001b[39;00m\n\u001b[1;32m    703\u001b[0m     high \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m255\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m np\u001b[38;5;241m.\u001b[39missubdtype(A\u001b[38;5;241m.\u001b[39mdtype, np\u001b[38;5;241m.\u001b[39minteger) \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;241m1\u001b[39m\n","\u001b[0;31mTypeError\u001b[0m: Invalid shape (64, 180, 180, 3) for image data"],"ename":"TypeError","evalue":"Invalid shape (64, 180, 180, 3) for image data","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1300x1300 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAToAAAE6CAYAAACGQp5cAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/TGe4hAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAEG0lEQVR4nO3UQQ0AIBDAMMC/50MFIVlaBXttz8wsgLDzOwDgNaMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAPKMD8owOyDM6IM/ogDyjA/KMDsgzOiDP6IA8owPyjA7IMzogz+iAvAv9lwZwD1GuZwAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\ninputs = keras.Input(shape=(180, 180, 3))\nx = layers.Rescaling(1./255)(inputs)\nx = layers.Conv2D(filters=32, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=64, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.Flatten()(x)\noutputs = layers.Dense(1, activation=\"sigmoid\")(x)\n\n\n# model = keras.Model(inputs=inputs, outputs=outputs)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:25.551485Z","iopub.execute_input":"2024-08-26T17:42:25.551867Z","iopub.status.idle":"2024-08-26T17:42:25.604486Z","shell.execute_reply.started":"2024-08-26T17:42:25.551837Z","shell.execute_reply":"2024-08-26T17:42:25.603658Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"code","source":"# tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\n# # instantiate a distribution strategy\n# tf.tpu.experimental.initialize_tpu_system(tpu)\n# tpu_strategy = tf.distribute.TPUStrategy(tpu)\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n    print(\"Device:\", tpu.master())\n    strategy = tf.distribute.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint(\"Number of replicas:\", strategy.num_replicas_in_sync)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:26.73255Z","iopub.execute_input":"2024-08-26T17:42:26.733081Z","iopub.status.idle":"2024-08-26T17:42:26.738497Z","shell.execute_reply.started":"2024-08-26T17:42:26.733043Z","shell.execute_reply":"2024-08-26T17:42:26.737703Z"},"trusted":true},"execution_count":104,"outputs":[{"name":"stdout","text":"Number of replicas: 1\n","output_type":"stream"}]},{"cell_type":"code","source":"BATCH_SIZE = 8 * strategy.num_replicas_in_sync\n\n# GCS_PATH = KaggleDatasets().get_gcs_path() ","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:27.724435Z","iopub.execute_input":"2024-08-26T17:42:27.724914Z","iopub.status.idle":"2024-08-26T17:42:27.729843Z","shell.execute_reply.started":"2024-08-26T17:42:27.724878Z","shell.execute_reply":"2024-08-26T17:42:27.728493Z"},"trusted":true},"execution_count":105,"outputs":[]},{"cell_type":"code","source":"with strategy.scope():\n    model = keras.Model(inputs=inputs, outputs=outputs)\n    model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:28.37426Z","iopub.execute_input":"2024-08-26T17:42:28.374725Z","iopub.status.idle":"2024-08-26T17:42:28.385835Z","shell.execute_reply.started":"2024-08-26T17:42:28.374689Z","shell.execute_reply":"2024-08-26T17:42:28.384922Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"code","source":"\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:29.054364Z","iopub.execute_input":"2024-08-26T17:42:29.054796Z","iopub.status.idle":"2024-08-26T17:42:29.059238Z","shell.execute_reply.started":"2024-08-26T17:42:29.054763Z","shell.execute_reply":"2024-08-26T17:42:29.058447Z"},"trusted":true},"execution_count":107,"outputs":[{"name":"stdout","text":"Number of accelerators:  1\n","output_type":"stream"}]},{"cell_type":"code","source":"\nhistory = model.fit(\n    val_dataset,\n    epochs=3\n    # callbacks=callbacks\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:42:29.572151Z","iopub.execute_input":"2024-08-26T17:42:29.572643Z","iopub.status.idle":"2024-08-26T17:42:31.124546Z","shell.execute_reply.started":"2024-08-26T17:42:29.572604Z","shell.execute_reply":"2024-08-26T17:42:31.123149Z"},"trusted":true},"execution_count":108,"outputs":[{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotFoundError\u001b[0m                             Traceback (most recent call last)","Cell \u001b[0;32mIn[108], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43mval_dataset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m3\u001b[39;49m\n\u001b[1;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;66;43;03m# callbacks=callbacks\u001b[39;49;00m\n\u001b[1;32m      5\u001b[0m \u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:53\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     52\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 53\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m pywrap_tfe\u001b[38;5;241m.\u001b[39mTFE_Py_Execute(ctx\u001b[38;5;241m.\u001b[39m_handle, device_name, op_name,\n\u001b[1;32m     54\u001b[0m                                       inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     56\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","\u001b[0;31mNotFoundError\u001b[0m: Graph execution error:\n\nDetected at node StatefulPartitionedCall defined at (most recent call last):\n  File \"/usr/local/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/local/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel_launcher.py\", line 18, in <module>\n\n  File \"/usr/local/lib/python3.10/site-packages/traitlets/config/application.py\", line 1075, in launch_instance\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelapp.py\", line 739, in start\n\n  File \"/usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/local/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 545, in dispatch_queue\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 534, in process_one\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 437, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/ipkernel.py\", line 362, in execute_request\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 778, in execute_request\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/ipkernel.py\", line 449, in do_execute\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/zmqshell.py\", line 549, in run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3075, in run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3130, in _run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/async_helpers.py\", line 128, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3334, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3517, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3577, in run_code\n\n  File \"/tmp/ipykernel_13/1766094961.py\", line 1, in <module>\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py\", line 318, in fit\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py\", line 121, in one_step_on_iterator\n\ncould not find registered transfer manager for platform Host -- check target linkage\n\t [[{{node StatefulPartitionedCall}}]] [Op:__inference_one_step_on_iterator_3737]"],"ename":"NotFoundError","evalue":"Graph execution error:\n\nDetected at node StatefulPartitionedCall defined at (most recent call last):\n  File \"/usr/local/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/local/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel_launcher.py\", line 18, in <module>\n\n  File \"/usr/local/lib/python3.10/site-packages/traitlets/config/application.py\", line 1075, in launch_instance\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelapp.py\", line 739, in start\n\n  File \"/usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py\", line 205, in start\n\n  File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/local/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 545, in dispatch_queue\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 534, in process_one\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 437, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/ipkernel.py\", line 362, in execute_request\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/kernelbase.py\", line 778, in execute_request\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/ipkernel.py\", line 449, in do_execute\n\n  File \"/usr/local/lib/python3.10/site-packages/ipykernel/zmqshell.py\", line 549, in run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3075, in run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3130, in _run_cell\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/async_helpers.py\", line 128, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3334, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3517, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3577, in run_code\n\n  File \"/tmp/ipykernel_13/1766094961.py\", line 1, in <module>\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 117, in error_handler\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py\", line 318, in fit\n\n  File \"/usr/local/lib/python3.10/site-packages/keras/src/backend/tensorflow/trainer.py\", line 121, in one_step_on_iterator\n\ncould not find registered transfer manager for platform Host -- check target linkage\n\t [[{{node StatefulPartitionedCall}}]] [Op:__inference_one_step_on_iterator_3737]","output_type":"error"}]},{"cell_type":"code","source":"# callbacks = [\n#     keras.callbacks.ModelCheckpoint(\n#         filepath=\"convnet_from_scratch.keras\",\n#         save_best_only=True,\n#         monitor=\"val_loss\")\n# ]\nhistory = model.fit(\n    train_dataset,\n    epochs=3,\n    validation_data=validation_dataset\n#     callbacks=callbacks\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T15:51:25.784091Z","iopub.execute_input":"2024-08-17T15:51:25.784726Z","iopub.status.idle":"2024-08-17T15:51:26.868083Z","shell.execute_reply.started":"2024-08-17T15:51:25.78469Z","shell.execute_reply":"2024-08-17T15:51:26.866937Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[11], line 7\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# callbacks = [\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m#     keras.callbacks.ModelCheckpoint(\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#         filepath=\"convnet_from_scratch.keras\",\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m#         save_best_only=True,\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m#         monitor=\"val_loss\")\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# ]\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m      8\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtrain_dataset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      9\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m     10\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidation_dataset\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;43;03m#     callbacks=callbacks\u001b[39;49;00m\n\u001b[1;32m     12\u001b[0m \u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/keras/src/backend/tensorflow/optimizer.py:33\u001b[0m, in \u001b[0;36mTFOptimizer.add_variable_from_reference\u001b[0;34m(self, reference_variable, name, initializer)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     31\u001b[0m     colocate_var \u001b[38;5;241m=\u001b[39m reference_variable\n\u001b[0;32m---> 33\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_distribution_strategy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mextended\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolocate_vars_with\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     34\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcolocate_var\u001b[49m\n\u001b[1;32m     35\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m     36\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39madd_variable_from_reference(\n\u001b[1;32m     37\u001b[0m         reference_variable, name\u001b[38;5;241m=\u001b[39mname, initializer\u001b[38;5;241m=\u001b[39minitializer\n\u001b[1;32m     38\u001b[0m     )\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'extended'"],"ename":"AttributeError","evalue":"'NoneType' object has no attribute 'extended'","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}