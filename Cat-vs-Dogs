{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3362,"databundleVersionId":31148,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rashidulhaqyousafzai/cat-vs-dogs-project?scriptVersionId=192526996\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-13T17:14:01.631131Z","iopub.execute_input":"2024-08-13T17:14:01.631575Z","iopub.status.idle":"2024-08-13T17:14:03.049851Z","shell.execute_reply.started":"2024-08-13T17:14:01.631535Z","shell.execute_reply":"2024-08-13T17:14:03.048219Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/dogs-vs-cats/test1.zip\n/kaggle/input/dogs-vs-cats/train.zip\n/kaggle/input/dogs-vs-cats/sampleSubmission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import keras\nkeras.__version__","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:14:36.366715Z","iopub.execute_input":"2024-08-13T17:14:36.367295Z","iopub.status.idle":"2024-08-13T17:14:36.378947Z","shell.execute_reply.started":"2024-08-13T17:14:36.367245Z","shell.execute_reply":"2024-08-13T17:14:36.377416Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"'3.4.1'"},"metadata":{}}]},{"cell_type":"code","source":"# from tfimm.architectures import lora\n# model = lora.create_model(\n#    model_name=\"convnext_tiny\", pretrained=True, lora_rank=1\n# )","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:02.611635Z","iopub.execute_input":"2024-08-13T17:15:02.612154Z","iopub.status.idle":"2024-08-13T17:15:02.618261Z","shell.execute_reply.started":"2024-08-13T17:15:02.612117Z","shell.execute_reply":"2024-08-13T17:15:02.616623Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:02.873922Z","iopub.execute_input":"2024-08-13T17:15:02.874518Z","iopub.status.idle":"2024-08-13T17:15:02.881251Z","shell.execute_reply.started":"2024-08-13T17:15:02.874363Z","shell.execute_reply":"2024-08-13T17:15:02.879386Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# model.compile(loss=\"binary_crossentropy\",\n#               optimizer=\"rmsprop\",\n#               metrics=[\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:03.125031Z","iopub.execute_input":"2024-08-13T17:15:03.12547Z","iopub.status.idle":"2024-08-13T17:15:03.130879Z","shell.execute_reply.started":"2024-08-13T17:15:03.125435Z","shell.execute_reply":"2024-08-13T17:15:03.129604Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"!unzip -qq /kaggle/input/dogs-vs-cats/train.zip","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:03.823706Z","iopub.execute_input":"2024-08-13T17:15:03.824193Z","iopub.status.idle":"2024-08-13T17:15:15.227316Z","shell.execute_reply.started":"2024-08-13T17:15:03.824145Z","shell.execute_reply":"2024-08-13T17:15:15.225422Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import os, shutil, pathlib\n\noriginal_dir = pathlib.Path(\"/kaggle/working/train\")\nnew_base_dir = pathlib.Path(\"/kaggle/working/cats_vs_dogs_small\")\n\ndef make_subset(subset_name, start_index, end_index):\n    for category in (\"cat\", \"dog\"):\n        dir = new_base_dir / subset_name / category\n        print(dir)\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n        fnames = [f\"{category}.{i}.jpg\" for i in range(start_index, end_index)]\n        for fname in fnames:\n            shutil.copyfile(src=original_dir / fname,\n                            dst=dir / fname)\n\nmake_subset(\"train\", start_index=0, end_index=1000)\nmake_subset(\"validation\", start_index=1000, end_index=1500)\nmake_subset(\"test\", start_index=1500, end_index=2500)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:15.23035Z","iopub.execute_input":"2024-08-13T17:15:15.230862Z","iopub.status.idle":"2024-08-13T17:15:16.095543Z","shell.execute_reply.started":"2024-08-13T17:15:15.230816Z","shell.execute_reply":"2024-08-13T17:15:16.094347Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"/kaggle/working/cats_vs_dogs_small/train/cat\n/kaggle/working/cats_vs_dogs_small/train/dog\n/kaggle/working/cats_vs_dogs_small/validation/cat\n/kaggle/working/cats_vs_dogs_small/validation/dog\n/kaggle/working/cats_vs_dogs_small/test/cat\n/kaggle/working/cats_vs_dogs_small/test/dog\n","output_type":"stream"}]},{"cell_type":"code","source":"from tensorflow.keras.utils import image_dataset_from_directory\n\ntrain_dataset = image_dataset_from_directory(\n    new_base_dir / \"train\",\n    image_size=(180, 180),\n    batch_size=32)\nvalidation_dataset = image_dataset_from_directory(\n    new_base_dir / \"validation\",\n    image_size=(180, 180),\n    batch_size=32)\ntest_dataset = image_dataset_from_directory(\n    new_base_dir / \"test\",\n    image_size=(180, 180),\n    batch_size=32)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:16.096968Z","iopub.execute_input":"2024-08-13T17:15:16.097355Z","iopub.status.idle":"2024-08-13T17:15:16.689603Z","shell.execute_reply.started":"2024-08-13T17:15:16.097314Z","shell.execute_reply":"2024-08-13T17:15:16.688502Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Found 2000 files belonging to 2 classes.\nFound 1000 files belonging to 2 classes.\nFound 2000 files belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\ninputs = keras.Input(shape=(180, 180, 3))\nx = layers.Rescaling(1./255)(inputs)\nx = layers.Conv2D(filters=32, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=64, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.Flatten()(x)\noutputs = layers.Dense(1, activation=\"sigmoid\")(x)\nmodel = keras.Model(inputs=inputs, outputs=outputs)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:29.278423Z","iopub.execute_input":"2024-08-13T17:15:29.278949Z","iopub.status.idle":"2024-08-13T17:15:29.419978Z","shell.execute_reply.started":"2024-08-13T17:15:29.278909Z","shell.execute_reply":"2024-08-13T17:15:29.418649Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"model.compile(loss=\"binary_crossentropy\",\n              optimizer=\"rmsprop\",\n              metrics=[\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:29.943696Z","iopub.execute_input":"2024-08-13T17:15:29.944168Z","iopub.status.idle":"2024-08-13T17:15:29.962498Z","shell.execute_reply.started":"2024-08-13T17:15:29.944131Z","shell.execute_reply":"2024-08-13T17:15:29.961184Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"history = model.fit(\n    train_dataset,\n    epochs=1,\n    validation_data=validation_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:32.045806Z","iopub.execute_input":"2024-08-13T17:15:32.046271Z","iopub.status.idle":"2024-08-13T17:17:55.641548Z","shell.execute_reply.started":"2024-08-13T17:15:32.046233Z","shell.execute_reply":"2024-08-13T17:17:55.640246Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m95s\u001b[0m 1s/step - accuracy: 0.4808 - loss: 0.7540 - val_accuracy: 0.5000 - val_loss: 0.6928\n","output_type":"stream"}]},{"cell_type":"code","source":"# callbacks = [\n#     keras.callbacks.ModelCheckpoint(\n#         filepath=\"convnet_from_scratch.keras\",\n#         save_best_only=True,\n#         monitor=\"val_loss\")\n# ]\n# history = model.fit(\n#     train_dataset,\n#     epochs=3,\n#     validation_data=validation_dataset,\n#     callbacks=callbacks)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:14:20.121044Z","iopub.status.idle":"2024-08-13T17:14:20.12149Z","shell.execute_reply.started":"2024-08-13T17:14:20.121278Z","shell.execute_reply":"2024-08-13T17:14:20.121296Z"},"trusted":true},"execution_count":null,"outputs":[]}]}